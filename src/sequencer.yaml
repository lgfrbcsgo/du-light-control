slots:
  '0':
    name: slot1
    type:
      events: [ ]
      methods: [ ]
  '1':
    name: slot2
    type:
      events: [ ]
      methods: [ ]
  '2':
    name: slot3
    type:
      events: [ ]
      methods: [ ]
  '3':
    name: slot4
    type:
      events: [ ]
      methods: [ ]
  '4':
    name: slot5
    type:
      events: [ ]
      methods: [ ]
  '5':
    name: slot6
    type:
      events: [ ]
      methods: [ ]
  '6':
    name: slot7
    type:
      events: [ ]
      methods: [ ]
  '7':
    name: slot8
    type:
      events: [ ]
      methods: [ ]
  '8':
    name: slot9
    type:
      events: [ ]
      methods: [ ]
  '9':
    name: slot10
    type:
      events: [ ]
      methods: [ ]
  "-1":
    name: unit
    type:
      events: [ ]
      methods: [ ]
  "-2":
    name: system
    type:
      events: [ ]
      methods: [ ]

handlers:
  - key: '0'
    filter:
      args: [ ]
      signature: onStart()
      slotKey: '-1'
    code: |
      intervalDuration = 0.469 --export: The duration of each interval in seconds.
      idleState = false --export: The state of the lights when the script has shutdown.

      -- PASTE SEQUENCE HERE. Replace {} with the output from the extractor.
      sequence = {}

      lights = {}
      local slots = { slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10 }
      for _, element in pairs(slots) do
          if element.activate and element.deactivate and element.setRGBColor then
              table.insert(lights, element)
          end
      end

      nextUpdate = math.ceil(system.getArkTime() / intervalDuration) * intervalDuration

      unit.hide()
      unit.setTimer("garbage", 5)


  - key: '1'
    filter:
      args: [ ]
      signature: onUpdate()
      slotKey: '-2'
    code: |
      if nextUpdate > system.getArkTime() then
          return
      end

      local intervalIndex = math.floor(system.getTime() / intervalDuration)
      local step = sequence[intervalIndex % #sequence + 1]

      for index, light in pairs(lights) do
          local state = step[index] or 0

          local on = (state >> 24) == 1
          local r = (state >> 16) & 255
          local g = (state >> 8) & 255
          local b = state & 255

          if on then
              light.activate()
          else
              light.deactivate()
          end
          light.setRGBColor(r, g, b)
      end

      nextUpdate = (intervalIndex + 1) * intervalDuration

  - key: '2'
    filter:
      args: [ ]
      signature: onStop()
      slotKey: '-1'
    code: |
      for _, light in pairs(lights) do
          if idleState then
              light.activate()
          else
              light.deactivate()
          end
          light.setRGBColor(255, 255, 255)
      end


  - key: '3'
    filter:
      args:
        - value: garbage
      signature: onTimer(timerId)
      slotKey: '-1'
    code: |
      collectgarbage("collect")

methods: [ ]
events: [ ]
